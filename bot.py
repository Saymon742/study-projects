import asyncio
import os
import logging
import traceback
from datetime import datetime, timedelta, timezone, time
from typing import Optional, Tuple

import aiosqlite
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.interval import IntervalTrigger

import dateparser
from dateparser.search import search_dates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_TOKEN", "7639908563:AAFrKwzQ4T_DwhGbK9pZ2f910EyS3W-0Tmo")
DB_PATH = "reminders.db"

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
CREATE_TABLES_SQL = """
CREATE TABLE IF NOT EXISTS users (
  user_id INTEGER PRIMARY KEY,
  tz_offset_minutes INTEGER NOT NULL DEFAULT 0
);

CREATE TABLE IF NOT EXISTS reminders (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER NOT NULL,
  text TEXT NOT NULL,
  due_at_utc TEXT NOT NULL,
  created_at_utc TEXT NOT NULL,
  status TEXT NOT NULL DEFAULT 'active',
  FOREIGN KEY(user_id) REFERENCES users(user_id)
);
"""

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.executescript(CREATE_TABLES_SQL)
        await db.commit()

async def get_tz_offset_minutes(user_id: int) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT tz_offset_minutes FROM users WHERE user_id=?", (user_id,)) as cur:
            row = await cur.fetchone()
            return row[0] if row else 0

async def set_tz_offset_minutes(user_id: int, minutes: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO users(user_id, tz_offset_minutes) VALUES(?, ?) ON CONFLICT(user_id) DO UPDATE SET tz_offset_minutes=excluded.tz_offset_minutes", 
            (user_id, minutes)
        )
        await db.commit()

async def insert_reminder(user_id: int, text: str, due_at_utc: datetime) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO reminders(user_id, text, due_at_utc, created_at_utc, status) VALUES(?, ?, ?, ?, 'active')",
            (user_id, text, due_at_utc.isoformat(), datetime.now(timezone.utc).isoformat()),
        )
        await db.commit()
        async with db.execute("SELECT last_insert_rowid()") as cur:
            return (await cur.fetchone())[0]

async def get_user_active_reminders(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT id, text, due_at_utc FROM reminders WHERE user_id=? AND status='active' ORDER BY due_at_utc ASC",
            (user_id,),
        ) as cur:
            return await cur.fetchall()

async def get_reminder(reminder_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT id, user_id, text, due_at_utc, status FROM reminders WHERE id=?",
            (reminder_id,),
        ) as cur:
            return await cur.fetchone()

async def update_reminder(reminder_id: int, *, text: Optional[str] = None, due_at_utc: Optional[datetime] = None):
    fields, params = [], []
    if text is not None:
        fields.append("text=?")
        params.append(text)
    if due_at_utc is not None:
        fields.append("due_at_utc=?")
        params.append(due_at_utc.isoformat())
    if fields:
        params.append(reminder_id)
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute(f"UPDATE reminders SET {', '.join(fields)} WHERE id=?", params)
            await db.commit()

async def delete_reminder(reminder_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE reminders SET status='deleted' WHERE id=?", (reminder_id,))
        await db.commit()

async def list_all_future_active_reminders():
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT r.id, r.user_id, r.text, r.due_at_utc, u.tz_offset_minutes FROM reminders r JOIN users u ON r.user_id=u.user_id WHERE r.status='active'"
        ) as cur:
            return await cur.fetchall()

# ==================== –†–ê–ë–û–¢–ê –° –í–†–ï–ú–ï–ù–ï–ú ====================
def parse_tz_offset_str(offset_str: str) -> Optional[int]:
    try:
        sign = 1 if offset_str.strip()[0] == '+' else -1
        hh, mm = offset_str.strip()[1:].split(':')
        return sign * (int(hh) * 60 + int(mm))
    except Exception:
        return None

def offset_tz(minutes: int) -> timezone:
    return timezone(timedelta(minutes=minutes))

def format_dt_for_user(dt_utc: datetime, tz_minutes: int) -> str:
    return dt_utc.astimezone(offset_tz(tz_minutes)).strftime("%d.%m.%Y, %H:%M")

def compute_morning_dt(dt_utc: datetime, tz_minutes: int) -> datetime:
    tz = offset_tz(tz_minutes)
    local_dt = dt_utc.astimezone(tz)
    morning_local = datetime.combine(local_dt.date(), time(8, 0), tz)
    return morning_local.astimezone(timezone.utc)

# ==================== –ü–ê–†–°–ò–ù–ì –î–ê–¢ ====================
LANGS = ["ru", "uk", "en"]

def extract_datetime_and_text(raw: str, base_dt_utc: datetime, tz_minutes: int) -> Tuple[Optional[datetime], str]:
    tz = offset_tz(tz_minutes)
    base_local = base_dt_utc.astimezone(tz)
    current_year = base_local.year
    
    settings = {
        "PREFER_DATES_FROM": "future",
        "TIMEZONE": str(tz),
        "RETURN_AS_TIMEZONE_AWARE": True,
        "RELATIVE_BASE": base_local,
        "PARSERS": ["absolute-time", "relative-time", "timestamp", "custom-formats"],
        "DEFAULT_LANGUAGES": LANGS,
    }

    try:
        result = search_dates(raw, languages=LANGS, settings=settings)
        if not result:
            return None, raw.strip()

        chosen_text, chosen_dt = None, None
        for fragment, dt in result:
            if dt.year == 2000:
                dt = dt.replace(year=current_year)
                if dt < base_local:
                    dt = dt.replace(year=current_year + 1)
            
            chosen_text, chosen_dt = fragment, dt
            if dt.hour != 0 or dt.minute != 0:
                break

        if not chosen_dt or chosen_dt < base_local:
            return None, raw.strip()

        due_utc = chosen_dt.astimezone(timezone.utc)
        
        cleaned = raw
        for fragment, _ in result:
            cleaned = cleaned.replace(fragment, "", 1).strip()
        
        return due_utc, cleaned.strip(" ,.-") or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {e}")
        return None, raw.strip()

# ==================== –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ====================
scheduler = None
bot_instance = None

async def schedule_all_existing_jobs():
    rows = await list_all_future_active_reminders()
    now = datetime.now(timezone.utc)
    for row in rows:
        rid, user_id, text, due_at_utc_str, tz_minutes = row
        due_at_utc = datetime.fromisoformat(due_at_utc_str).astimezone(timezone.utc)
        await schedule_reminder_jobs(rid, user_id, text, due_at_utc, tz_minutes, now)

async def schedule_reminder_jobs(reminder_id: int, user_id: int, text: str, due_at_utc: datetime, tz_minutes: int, now: Optional[datetime] = None):
    if now is None:
        now = datetime.now(timezone.utc)

    if due_at_utc > now:
        scheduler.add_job(
            send_due_notification, 
            trigger=DateTrigger(run_date=due_at_utc), 
            id=f"due:{reminder_id}", 
            args=[user_id, reminder_id, text]
        )

    pre30 = due_at_utc - timedelta(minutes=30)
    if pre30 > now:
        scheduler.add_job(
            send_pre30_notification, 
            trigger=DateTrigger(run_date=pre30), 
            id=f"pre30:{reminder_id}", 
            args=[user_id, reminder_id, text]
        )

    morning_utc = compute_morning_dt(due_at_utc, tz_minutes)
    if morning_utc > now:
        scheduler.add_job(
            send_morning_notification, 
            trigger=DateTrigger(run_date=morning_utc), 
            id=f"morning:{reminder_id}", 
            args=[user_id, reminder_id, text, due_at_utc, tz_minutes]
        )

async def remove_jobs_for(reminder_id: int):
    for prefix in ("due", "pre30", "morning"):
        try:
            scheduler.remove_job(f"{prefix}:{reminder_id}")
        except Exception:
            pass

# ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================
async def send_morning_notification(user_id: int, reminder_id: int, text: str, due_at_utc: datetime, tz_minutes: int):
    try:
        when = format_dt_for_user(due_at_utc, tz_minutes)
        await bot_instance.send_message(user_id, f"üåÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {text}\n–ö–æ–≥–¥–∞: {when}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def send_pre30_notification(user_id: int, reminder_id: int, text: str):
    try:
        await bot_instance.send_message(user_id, f"‚è≥ –ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç: {text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")

async def send_due_notification(user_id: int, reminder_id: int, text: str):
    try:
        await bot_instance.send_message(user_id, f"üîî –°–µ–π—á–∞—Å: {text}")
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# ==================== FSM –°–û–°–¢–û–Ø–ù–ò–Ø ====================
class CreateReminder(StatesGroup):
    waiting_for_datetime = State()
    waiting_for_text = State()

class EditReminder(StatesGroup):
    choosing_field = State()
    entering_text = State()
    entering_datetime = State()

# ==================== –û–°–ù–û–í–ù–û–ô –ö–û–î –ë–û–¢–ê ====================
dp = Dispatcher()

async def bot_heartbeat():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat –≤ –∫–æ–Ω—Å–æ–ª—å –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã"""
    logger.info("üíì –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    jobs = scheduler.get_jobs()
    active_jobs = len([job for job in jobs if not job.id.startswith('heartbeat')])
    logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {active_jobs}")

@dp.startup()
async def on_startup(bot: Bot):
    global scheduler, bot_instance
    bot_instance = bot
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await init_db()
    
    scheduler = AsyncIOScheduler(timezone=timezone.utc)
    scheduler.start()
    
    # –î–æ–±–∞–≤–ª—è–µ–º heartbeat –∑–∞–¥–∞—á—É
    scheduler.add_job(
        bot_heartbeat,
        trigger=IntervalTrigger(minutes=2),
        id="heartbeat",
        replace_existing=True
    )
    
    await schedule_all_existing_jobs()
    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# ==================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====================

@dp.message()
async def handle_unknown(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    if message.text.startswith('/'):
        await message.answer(
            "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
        )

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö.\n\n"
        "üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ /remind - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "‚Ä¢ /my_reminders - –≤–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ /set_tz - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å\n"
        "‚Ä¢ /help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üöÄ *–ù–∞—á–Ω–∏—Ç–µ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:*\n"
        "/set_tz +03:00 (–¥–ª—è –ú–æ—Å–∫–≤—ã)\n\n"
        "‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ /help",
        parse_mode="Markdown"
    )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã help"""
    help_text = """
ü§ñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—è

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/remind - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/my_reminders - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/set_tz - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

üìã –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
‚Ä¢ /remind –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 —Å–æ–≤–µ—â–∞–Ω–∏–µ
‚Ä¢ /remind 25 –¥–µ–∫–∞–±—Ä—è –≤ 18:30 –∫—É–ø–∏—Ç—å —Ç–æ—Ä—Ç
‚Ä¢ /remind —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ
‚Ä¢ /set_tz +02:00 - –¥–ª—è –∫–∏–µ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

‚öôÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫–æ–º–∞–Ω–¥–æ–π /set_tz
2. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /remind
3. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
4. –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ /my_reminders

üîî –ë–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç –≤–∞–º:
- –£—Ç—Ä–æ–º –≤ 8:00 –æ —Å–æ–±—ã—Ç–∏—è—Ö –¥–Ω—è
- –ó–∞ 30 –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è
- –í —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
"""
    await message.answer(help_text)


@dp.message(Command("set_tz"))
async def cmd_set_tz(message: Message, command: CommandObject):
    if not command.args:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –æ—Ñ—Å–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ +03:00")
        return
        
    minutes = parse_tz_offset_str(command.args.strip())
    if minutes is None:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: +03:00 –∏–ª–∏ -05:30")
        return
        
    await set_tz_offset_minutes(message.from_user.id, minutes)
    await message.answer(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: UTC{command.args.strip()}")

@dp.message(Command("remind"))
async def cmd_remind(message: Message, command: CommandObject, state: FSMContext):
    user_id = message.from_user.id
    tz_minutes = await get_tz_offset_minutes(user_id)
    args_text = (command.args or "").strip()

    if not args_text:
        await state.set_state(CreateReminder.waiting_for_datetime)
        await state.update_data(tz_minutes=tz_minutes)
        await message.answer("–ù–∞ –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä: '–∑–∞–≤—Ç—Ä–∞ –≤ 15:00'")
        return

    due_utc, task_text = extract_datetime_and_text(args_text, message.date.replace(tzinfo=timezone.utc), tz_minutes)
    
    if due_utc is None:
        await state.set_state(CreateReminder.waiting_for_datetime)
        await state.update_data(partial_text=args_text, tz_minutes=tz_minutes)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ù–∞ –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?")
        return
        
    if due_utc <= datetime.now(timezone.utc):
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è")
        return
        
    if not task_text:
        await state.set_state(CreateReminder.waiting_for_text)
        await state.update_data(due_utc=due_utc.isoformat(), tz_minutes=tz_minutes)
        await message.answer("–û —á—ë–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?")
        return
        
    rid = await insert_reminder(user_id, task_text, due_utc)
    await schedule_reminder_jobs(rid, user_id, task_text, due_utc, tz_minutes)
    when = format_dt_for_user(due_utc, tz_minutes)
    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:\n‚Ä¢ {task_text}\n‚Ä¢ –ö–æ–≥–¥–∞: {when}")

@dp.message(CreateReminder.waiting_for_datetime)
async def cr_get_datetime(message: Message, state: FSMContext):
    data = await state.get_data()
    tz_minutes = data.get("tz_minutes", 0)
    
    due_utc, _ = extract_datetime_and_text(message.text, message.date.replace(tzinfo=timezone.utc), tz_minutes)
    
    if due_utc is None or due_utc <= datetime.now(timezone.utc):
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
        
    await state.update_data(due_utc=due_utc.isoformat())
    await state.set_state(CreateReminder.waiting_for_text)
    await message.answer("–û —á—ë–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?")

@dp.message(CreateReminder.waiting_for_text)
async def cr_get_text(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    tz_minutes = data.get("tz_minutes", 0)
    due_utc = datetime.fromisoformat(data["due_utc"]).astimezone(timezone.utc)
    text = message.text.strip()
    
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
        
    rid = await insert_reminder(user_id, text, due_utc)
    await schedule_reminder_jobs(rid, user_id, text, due_utc, tz_minutes)
    when = format_dt_for_user(due_utc, tz_minutes)
    await state.clear()
    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:\n‚Ä¢ {text}\n‚Ä¢ –ö–æ–≥–¥–∞: {when}")

@dp.message(Command("my_reminders"))
async def cmd_my_reminders(message: Message):
    user_id = message.from_user.id
    tz_minutes = await get_tz_offset_minutes(user_id)
    rows = await get_user_active_reminders(user_id)
    
    if not rows:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        return

    parts = ["–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"]
    for row in rows:
        rid, text, due_at_utc_str = row
        due_at_utc = datetime.fromisoformat(due_at_utc_str).astimezone(timezone.utc)
        when = format_dt_for_user(due_at_utc, tz_minutes)
        parts.append(f"ID {rid}: {when} - {text}")

    await message.answer("\n".join(parts))
    
    for row in rows:
        rid, _, _ = row
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del:{rid}"),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit:{rid}")
        ]])
        await message.answer(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º ID {rid}", reply_markup=kb)

@dp.callback_query(F.data.startswith("del:"))
async def cb_delete_confirm(call: CallbackQuery):
    rid = int(call.data.split(":")[1])
    r = await get_reminder(rid)
    
    if not r or r[4] != 'active' or r[1] != call.from_user.id:
        await call.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
        
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"del_yes:{rid}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="noop")
    ]])
    await call.message.answer(f"–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: \"{r[2]}\"?", reply_markup=kb)
    await call.answer()

@dp.callback_query(F.data == "noop")
async def cb_noop(call: CallbackQuery):
    await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

@dp.callback_query(F.data.startswith("del_yes:"))
async def cb_delete_yes(call: CallbackQuery):
    rid = int(call.data.split(":")[1])
    r = await get_reminder(rid)
    
    if not r or r[4] != 'active' or r[1] != call.from_user.id:
        await call.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
        
    await delete_reminder(rid)
    await remove_jobs_for(rid)
    await call.message.answer("üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    await call.answer()

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
async def main():
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
        
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot = Bot(TOKEN)
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())